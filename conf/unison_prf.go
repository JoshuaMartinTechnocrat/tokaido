package conf

import (
	"bitbucket.org/ironstar/tokaido-cli/system"
	"bitbucket.org/ironstar/tokaido-cli/utils"

	"bytes"
	"log"
	"os"
	"text/template"
)

type prf struct {
	UnisonPort  string
	ProjectPath string
}

// UnisonPrf - Generate a `.prf` file for unison
func UnisonPrf() {
	config := GetConfig()

	s := prf{UnisonPort: system.UnisonLocalPort(), ProjectPath: config.Path}

	tmpl := template.New("unison.prf")

	tmpl, err := tmpl.Parse(`# Generated by TOKDAIDO
root = {{.ProjectPath}}
root = socket://localhost:{{.UnisonPort}}

# Paths to synchronize
path = .

# Some regexps specifying names and paths to ignore
ignore = Name node_modules
ignore = Name .git

# Log actions to the terminal
log = true

# Other options
prefer = newer
repeat = watch
auto = true`)

	if err != nil {
		log.Fatal("Parse: ", err)
		return
	}

	var tpl bytes.Buffer
	if err := tmpl.Execute(&tpl, s); err != nil {
		log.Fatal("Parse: ", err)
		return
	}

	CopyUnison(tpl.String())
}

// CopyUnison - Copy generated `.prf` file to `~/.unison/`
func CopyUnison(body string) {
	config := GetConfig()

	// detect if file exists
	path := utils.HomeDir() + "/.unison/" + config.Project + ".prf"
	var _, err = os.Stat(path)

	// create file if not exists
	if os.IsNotExist(err) {
		var file, err1 = os.Create(path)
		if err1 != nil {
			log.Fatal("Create: ", err)
			return
		}
		_, err = file.WriteString(body)

		defer file.Close()
	}
}
