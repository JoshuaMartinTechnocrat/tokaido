package unison

import (
	"bitbucket.org/ironstar/tokaido-cli/conf"
	"bitbucket.org/ironstar/tokaido-cli/system/fs"
	"fmt"

	"bufio"
	"bytes"
	"log"
	"os"
	"strings"
	"text/template"
)

type prf struct {
	UnisonPort  string
	ProjectPath string
}

var prfTemplateStr = `# Generated by TOKDAIDO
root = {{.ProjectPath}}
root = socket://localhost:{{.UnisonPort}}

# Paths to synchronize
path = .

# Some regexps specifying names and paths to ignore
ignore = Name node_modules
ignore = Name .git

# Log actions to the terminal
log = true

# Other options
prefer = newer
repeat = watch
auto = true`

// GetPrfPath ...
func GetPrfPath() string {
	config := conf.GetConfig()
	return fs.HomeDir() + "/.unison/" + config.Project
}

// CreateOrUpdatePrf - Create or Update a `.prf` file in `~/.unison/`
func CreateOrUpdatePrf() {
	// detect if file exists

	var _, err = os.Stat(GetPrfPath() + ".prf")

	// create file if not exists
	if os.IsNotExist(err) {
		GeneratePrf()
	} else {
		UpdatePrf()
	}
}

// GeneratePrf - Generate a `.prf` file for unison
func GeneratePrf() {
	config := conf.GetConfig()
	s := prf{UnisonPort: LocalPort(), ProjectPath: config.Path}

	tmpl := template.New("unison.prf")
	tmpl, err := tmpl.Parse(prfTemplateStr)

	if err != nil {
		log.Fatal("Parse: ", err)
		return
	}

	var tpl bytes.Buffer
	if err := tmpl.Execute(&tpl, s); err != nil {
		log.Fatal("Parse: ", err)
		return
	}
	fmt.Printf("11111 %s", GetPrfPath()+".prf")
	CreatePrf(tpl.String(), GetPrfPath()+".prf")
}

// CreatePrf - Write generated `.prf` file to `~/.unison/`
func CreatePrf(body string, path string) {
	var file, err = os.Create(path)
	if err != nil {
		log.Fatal("Create: ", err)
	}

	_, _ = file.WriteString(body)

	defer file.Close()
}

// UpdatePrf - Update a `.prf` file in `~/.unison/`
func UpdatePrf() {
	f, err := os.Open(GetPrfPath() + ".prf")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	portLine := "root = socket://localhost:"
	// Splits on newlines by default.
	scanner := bufio.NewScanner(f)

	var prfString []string
	for scanner.Scan() {
		if strings.Contains(scanner.Text(), portLine) {
			prfString = append(prfString, portLine+LocalPort())
		} else {
			prfString = append(prfString, scanner.Text())
		}
	}

	CreatePrf(strings.Join(prfString, "\n"), GetPrfPath()+".tmp.prf")
	ReplacePrf()
}

// ReplacePrf - Replace `.tmp.prf` with `.prf` file in `~/.unison/`
func ReplacePrf() {
	rootPrf := GetPrfPath()
	mainPrf := rootPrf + ".prf"
	tmpPrf := rootPrf + ".tmp.prf"

	// Remove the original .prf file
	os.Remove(mainPrf)

	// Rename `.tmp.prf` to be the new `.prf` file
	os.Rename(tmpPrf, mainPrf)
}
